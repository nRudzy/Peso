services:
  # Service PHP avec Symfony
  php:
    build:
      context: ./docker/php
      dockerfile: Dockerfile
    container_name: peso_php
    volumes:
      - ./:/var/www/html
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
    working_dir: /var/www/html
    depends_on:
      - postgres
    environment:
      - DATABASE_URL=postgresql://peso_user:peso_password@postgres:5432/peso_db
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-super-secret-jwt-key-change-in-production}
      - JWT_PASSPHRASE=${JWT_PASSPHRASE:-your-super-secret-passphrase-change-in-production}
      - MAILER_DSN=${MAILER_DSN:-smtp://mailhog:1025}
    networks:
      - peso_network

  # Service PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: peso_postgres
    environment:
      POSTGRES_DB: peso_db
      POSTGRES_USER: peso_user
      POSTGRES_PASSWORD: peso_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - peso_network

  # Service Nginx
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: peso_nginx
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - php
    networks:
      - peso_network

  # Service MailHog pour les emails de dÃ©veloppement
  mailhog:
    image: mailhog/mailhog:latest
    container_name: peso_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Interface web
    networks:
      - peso_network

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###

volumes:

###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
  postgres_data:

networks:
  peso_network:
    driver: bridge 