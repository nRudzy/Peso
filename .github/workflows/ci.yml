name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"

jobs:
  # Backend jobs
  backend-lint:
    name: Backend - Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black isort flake8 mypy

      - name: Run Black (code formatting)
        working-directory: ./backend
        run: black --check --diff .

      - name: Run isort (import sorting)
        working-directory: ./backend
        run: isort --check-only --diff .

      - name: Run Flake8 (linting)
        working-directory: ./backend
        run: flake8 .

      - name: Run MyPy (type checking)
        working-directory: ./backend
        run: mypy app/

  backend-tests:
    name: Backend - Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: peso_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup test environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_test
        run: |
          # Create test database and run migrations
          python -c "
          import psycopg2
          conn = psycopg2.connect('postgresql://postgres:postgres@127.0.0.1:5432/postgres')
          conn.autocommit = True
          cur = conn.cursor()
          cur.execute('DROP DATABASE IF EXISTS peso_test')
          cur.execute('CREATE DATABASE peso_test')
          conn.close()
          "
          # Run Alembic migrations
          alembic upgrade head

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_test
          SECRET_KEY: test-secret-key-for-ci
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: codecov-backend

  backend-security:
    name: Backend - Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety

      - name: Run Bandit (security linting)
        working-directory: ./backend
        run: bandit -r app/ -f json -o bandit-report.json || true

      - name: Run Safety (dependency vulnerability check)
        working-directory: ./backend
        run: safety check --json --output safety-report.json || true

  # Frontend jobs
  frontend-lint:
    name: Frontend - Lint & Format
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: ./frontend
        run: npx prettier --check src/

  frontend-tests:
    name: Frontend - Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:unit -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: codecov-frontend

  frontend-e2e:
    name: Frontend - E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

  frontend-build:
    name: Frontend - Build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

  # Mobile app jobs (placeholder for future)
  mobile-lint:
    name: Mobile - Lint & Format
    runs-on: ubuntu-latest
    if: false  # Disabled until mobile app is properly set up
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mobile-app/package-lock.json

      - name: Install dependencies
        working-directory: ./mobile-app
        run: npm ci

      - name: Run ESLint
        working-directory: ./mobile-app
        run: npm run lint

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: peso_integration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Setup test environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_integration_test
        run: |
          python -c "
          import psycopg2
          conn = psycopg2.connect('postgresql://postgres:postgres@127.0.0.1:5432/postgres')
          conn.autocommit = True
          cur = conn.cursor()
          cur.execute('DROP DATABASE IF EXISTS peso_integration_test')
          cur.execute('CREATE DATABASE peso_integration_test')
          conn.close()
          "
          alembic upgrade head

      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_integration_test
          SECRET_KEY: test-secret-key-for-integration
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 5

      - name: Run integration tests
        working-directory: ./frontend
        env:
          VITE_API_URL: http://localhost:8000
        run: |
          # Run integration tests here when implemented
          echo "Integration tests placeholder"

  # Quality gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-tests, backend-security, frontend-lint, frontend-tests, frontend-build]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Quality check
        run: |
          echo "🎉 All quality checks passed!"
          echo "✅ Backend: Lint, Tests, Security"
          echo "✅ Frontend: Lint, Tests, Build"
          echo "✅ Code coverage uploaded to Codecov"
          echo ""
          echo "Ready for deployment! 🚀"

  # Notify success
  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: success()
    
    steps:
      - name: Success notification
        run: |
          echo "🎉 CI Pipeline completed successfully!"
          echo "All modules passed quality checks"
          echo "Backend: FastAPI/Python ✅"
          echo "Frontend: Vue.js ✅"
          echo "Mobile: React Native/Ionic (pending) ⏳" 