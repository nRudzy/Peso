name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: "8.2"

jobs:
  lint:
    name: PHP Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: none

      - name: Validate composer.json
        run: composer validate --strict

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: PHP Lint
        run: find src tests -name "*.php" -print0 | xargs -0 -n1 -P8 php -l

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        tool: [phpstan, psalm]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: none

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Create cache directories
        run: |
          mkdir -p var/cache
          mkdir -p var/log

      - name: Run ${{ matrix.tool }}
        run: composer ${{ matrix.tool }}

  code-style:
    name: Code Style
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        tool: [phpcs, php-cs-fixer]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: none

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run ${{ matrix.tool }}
        run: composer ${{ matrix.tool }}

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: peso_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: pcov

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Create test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_test
        run: |
          php bin/console doctrine:database:create --env=test --no-interaction
          php bin/console doctrine:schema:create --env=test --no-interaction

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/peso_test
        run: composer test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./var/clover.xml
          flags: unittests
          name: codecov-umbrella

  quality:
    name: Quality Analysis
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        tool: [phpmd]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: none

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Run ${{ matrix.tool }}
        run: composer ${{ matrix.tool }}

  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: ctype, iconv, intl, pdo_pgsql
          coverage: none

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Security check
        run: composer audit

  notify:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [static-analysis, code-style, tests, quality, security]
    if: success()

    steps:
      - name: Success
        run: echo "All quality checks passed! ðŸŽ‰" 